alias functionNum R1;
alias currentPID R2;

//aquire disk
if ( functionNum == 3 ) then
	while ( [DISK_STATUS_TABLE] == 1 ) do
		[PROCESS_TABLE + ( currentPID * 16) + 4] = WAIT_DISK;
		multipush (R0,R1,R2);
		call SCHEDULER;
		multipop (R0,R1,R2);
	endwhile;
	[DISK_STATUS_TABLE]=1;
	[DISK_STATUS_TABLE+4]=currentPID;
	return ;
endif;

//aquire semaphore
if ( functionNum == 6 ) then
	alias i R11;
    i=0;
    alias index R12;
    index=-1;
    while(i<32) do
        if([SEMAPHORE_TABLE+4*i+1]==0) then 
            index=i;
            break;
        endif;
        i=i+1;
    endwhile;
    if(index==-1) then // no free entry
        R0=-1;
        return;
    endif;
    [SEMAPHORE_TABLE+4*index]=-1;
    [SEMAPHORE_TABLE+4*index+1]=1;
    R0=index;
    return;
endif;

//release semaphore
if ( functionNum == 7 ) then
	alias pid R10;
    pid=currentPID;
    alias semTableID R11;
    semTableID=R3;
    alias i R12;
    i=0;
    if([SEMAPHORE_TABLE+4*semTableID]==pid) then
        [SEMAPHORE_TABLE+4*semTableID]=-1;
        while(i<16) do 
            if(([PROCESS_TABLE+i*16+4]==WAIT_SEMAPHORE)&&([PROCESS_TABLE+i*16+5]==semTableID)) then
                [PROCESS_TABLE+i*16+4]=READY;
                [PROCESS_TABLE+i*16+5]=-1;
            endif;
            i=i+1;
        endwhile;
    endif;
    [SEMAPHORE_TABLE+4*semTableID+1]=[SEMAPHORE_TABLE+4*semTableID+1]-1;
    R0=0;
    return;
endif;

//aquire terminal
if ( functionNum == 8 ) then
	while ( [TERMINAL_STATUS_TABLE] == 1 ) do
		[PROCESS_TABLE + ( currentPID * 16) + 4] = WAIT_TERMINAL;
		multipush (R0,R1,R2);
		call SCHEDULER;
		multipop (R0,R1,R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE +1 ] = currentPID;
	return ;
endif;

//release terminal
if ( functionNum == 9 ) then
	if ( [TERMINAL_STATUS_TABLE +1 ] != currentPID ) then
		R0 = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE] = 0;
	alias i R3;
	i=0;
	while ( i < 16 ) do
		if ( [PROCESS_TABLE + ( i * 16 ) + 4] == WAIT_TERMINAL ) then
			[PROCESS_TABLE + ( i * 16 ) + 4] = READY;
		endif;
		i=i+1;
	endwhile;
	R0=0;
	return ;
endif;
