//process manager module

alias functionNum R1;
alias PID R2;

//get pcb entry
if(functionNum==1)then
	alias i R4;
    i=0;
    while(i<16) do
        if([PROCESS_TABLE+16*i+4] == TERMINATED) then
            [PROCESS_TABLE+16*i+1]=i;
            [PROCESS_TABLE+16*i+4]=ALLOCATED;
            [PROCESS_TABLE+16*i+14]=PAGE_TABLE_BASE+20*i;
            [PROCESS_TABLE+16*i+15]=10;
            R0=i;
            return;
        endif;
        i=i+1;
    endwhile;
    R0=-1;
    return;
endif;

//free user area page 
if(functionNum==2)then
	alias i R10;
    multipush(R0,R1,R2,R10);
    i=0;
    while(i<8) do
        if([[PROCESS_TABLE +PID*16+11]+2*i+496]==1) then
            R1=7; //release semaphore
            R3=PID;
            R2=[[PROCESS_TABLE +PID*16+11]+2*i+496+1];
            call MOD_0;
        endif;
        i=i+1;
    endwhile;
    multipop(R0,R1,R2,R10);
	alias pagenum R3;
	pagenum=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11];
	multipush(R0,R1,R2,R3);
	R1=2;
	R2=pagenum;
	call MOD_2;
	multipop(R0,R1,R2,R3);
	return ;
endif;

//exit process
if(functionNum==3)then
	multipush(R0,R1,R2);
	R1=4;
	R2=PID;
	call MOD_1;
	multipop(R0,R1,R2);
	multipush(R0,R1,R2);
	R1=2;
	R2=PID;
	call MOD_1;
	multipop(R0,R1,R2);
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=TERMINATED;
	if([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]!=9)then
		alias i R10;
		i=0;
		while(i<=15)do
			if([PROCESS_TABLE+(i*16)+4]==WAIT_PROCESS&&[PROCESS_TABLE+(i*16)+5]==[SYSTEM_STATUS_TABLE+1])then
				[PROCESS_TABLE+(i*16)+4]=READY;
			endif;
			if([PROCESS_TABLE+(i*16)+2]==[SYSTEM_STATUS_TABLE+1])then
				[PROCESS_TABLE+(i*16)+2]=-1;
			endif;
			i=i+1;
		endwhile;
	endif;
	return ;
endif;

//free page table
if(functionNum==4)then
	PTBR=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14];
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";
	alias i R4;
	i=0;
	while(i<8)do
		if([PTBR+2*i+4]!=-1)then
			multipush(R0,R1,R2,R4);
			R1=2;
			R2=[PTBR+2*i+4];
			call MOD_2;
			multipop(R0,R1,R2,R4);
			[PTBR+2*i+4]=-1;
			[PTBR+2*i+5]="0000";
		endif;
		i=i+1;
	endwhile;
	i=2;
	while(i<=3)do
		if([DISK_MAP_TABLE+PID*10+i]!=-1)then
			multipush(R1,R2,R3,R4);
			R3=PID;
			R1=4;
			R2=[DISK_MAP_TABLE+R3*10+i];
			call MOD_2;
			multipop(R1,R2,R3,R4);
		endif;
		i=i+1;
	endwhile;
	i=8;
	while(i<=9)do
		if([DISK_MAP_TABLE+PID*10+i]!=-1)then
			multipush(R1,R2,R3,R4);
			R3=PID;
			R1=4;
			R2=[DISK_MAP_TABLE+R3*10+i];
			call MOD_2;
			multipop(R1,R2,R3,R4);
		endif;
		i=i+1;
	endwhile;
	i=0;
	while(i<=9)do
		[DISK_MAP_TABLE+PID*10+i]=-1;
		i=i+1;
	endwhile;		
	return;
endif;

